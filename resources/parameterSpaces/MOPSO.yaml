swarmSize:
  type: integer
  range: [10, 200]
#
leaderArchive:
  type: categorical
  values:
    crowdingDistanceArchive:
    spatialSpreadDeviationArchive:
#
algorithmResult:
  type: categorical
  values:
    leaderArchive: 
    externalArchive:
      conditionalParameters:
        swarmSizeWithArchive:
          type: integer
          range: [10, 200]
        archiveType:
          type: categorical
          values:
            crowdingDistanceArchive: {}
            unboundedArchive: {}
#
swarmInitialization:
  type: categorical
  values:
    default:
    latinHypercubeSampling:
    scatterSearch:
#
velocityInitialization:
  type: categorical
  values:
    default:
    SPSO2007VelocityInitialization:
    SPSO2011VelocityInitialization:
#
perturbation:
  type: categorical
  values:
    frequencySelectionMutationBasedPerturbation:
      conditionalParameters:
        mutation:
          type: categorical
          globalSubParameters:
            mutationProbabilityFactor:
              type: real
              range: [0.0, 2.0]
            mutationRepairStrategy:
              type: categorical
              values:
                random:
                round:
                bounds:
            values:
              uniform:
                conditionalParameters:
                  uniformMutationPerturbation:
                    type: real
                    range: [0.0, 1.0]
              polynomial:
                conditionalParameters:
                  polynomialMutationDistributionIndex:
                    type: real
                    range: [5.0, 400.0]
              nonUniform:
                conditionalParameters:
                  nonUniformMutationPerturbation:
                    type: real
                    range: [0.0, 1.0]
              linkedPolynomial:
                conditionalParameters:
                  linkedPolynomialMutationDistributionIndex:
                    type: real
                    range: [5.0, 400.0]
          frequencyOfApplicationOfMutationOperator:
            type: integer
            range: [1, 10]
#
inertiaWeightComputingStrategy:
  type: categorical
  values:
    constantValue:
      conditionalParameters:
        weight:
          type: real
          range: [0.1, 1.0]
    randomSelectedValue:
      conditionalParameters:
        weightMin:
          type: real
          range: [0.1, 0.5]
        weightMax:
          type: real
          range: [0.5, 1.0]
    linearIncreasingValue:
      conditionalParameters:
        weightMin:
          type: real
          range: [0.1, 0.5]
        weightMax:
          type: real
          range: [0.5, 1.0]
    linearDecreasingValue:
      conditionalParameters:
        weightMin:
          type: real
          range: [0.1, 0.5]
        weightMax:
          type: real
          range: [0.5, 1.0]
#
velocityUpdate:
  type: categorical
  globalSubParameters:
    c1Min:
      type: real
      range: [1.0, 2.0]
    c1Max:
      type: real
      range: [2.0, 3.0]
    c2Min:
      type: real
      range: [1.0, 2.0]
    c2Max:
      type: real
      range: [2.0, 3.0]
  values:
    default:
    constrained:
    SPSO2011:
#
localBestInitialization:
  type: categorical
  values:
    default:
#
globalBestInitialization:
  type: categorical
  values:
    default:
#
globalBestSelection:
  type: categorical
  values:
    tournament:
      conditionalParameters:
        selectionTournamentSize:
          type: integer
          range: [2, 10]
    random:
#
globalBestUpdate:
  type: categorical
  values:
    default:
#
localBestUpdate:
  type: categorical
  values:
    default:
#
positionUpdate:
  type: categorical
  values:
    defaultPositionUpdate:
      conditionalParameters:
        velocityChangeWhenLowerLimitIsReached:
          type: double
          range: [-1.0, 1.0]
        velocityChangeWhenUpperLimitIsReached:
          type: double
          range: [-1.0, 1.0]
#
