algorithmResult:
  type: categorical
  values:
    population:
    externalArchive:
      conditionalParameters:
        populationSizeWithArchive:
          type: integer
          values: [10, 200]
        archiveType:
          type: categorical
          values:
            crowdingDistanceArchive:
            unboundedArchive:
#
createInitialSolutions:
  type: categorical
  values:
    default:
#
offspringPopulationSize:
  type: categorical
  values: [1, 2, 5, 10, 20, 50, 100, 200, 400]
#
variation:
  type: categorical
  values:
    crossoverAndMutationVariation:
      conditionalParameters:
        crossover:
          type: categorical
          globalSubParameters:
            crossoverProbability:
              type: double
              values: [0.0, 1.0]
          values:
            HUX:
            uniform:
            singlePoint:
        mutation:
          type: categorical
          globalSubParameters:
            mutationProbabilityFactor:
              type: double
              range: [0.0, 2.0]
          values:
            bitFlip:
#
selection:
  type: categorical
  values:
    tournament:
      conditionalParameters:
        selectionTournamentSize:
          type: integer
          values: [2, 10]
    random:
#

