algorithmResult:
  type: categorical
  values: 
    population:
    externalArchive:
        specificSubparameters: 
          populationSizeWithArchive:
              type: integer
              range: [10, 200]
          archiveType:
              type: categorical
              values: 
                crowdingDistanceArchive:
                unboundedArchive:
#
createInitialSolutions:
  type: categorical
  values: 
    default:
    latinHypercubeSampling:
    scatterSearch:
#
offspringPopulationSize:
  type: categorical
  values: [1, 2, 5, 10, 20, 50, 100, 200, 400]
#
variation:
  type: categorical
  values: 
    crossoverAndMutationVariation:
        specificSubparameters: 
          crossover:
              type: categorical
              globalSubparameters: 
                crossoverProbability:
                    type: double
                    values: [0.0, 1.0]
                crossoverRepairStrategy:
                    type: categorical
                    values: [random, round, bounds]
              values: 
                SBX:
                    specificSubparameters: 
                      sbxDistributionIndex:
                          type: double
                          values: [5.0, 400.0]
                blxAlpha:
                    specificSubparameters: 
                      blxAlphaCrossoverAlpha:
                          type: double
                          values: [0.0, 1.0]
                wholeArithmetic:
          mutation:
              type: categorical
              globalSubparameters: 
                mutationProbabilityFactor:
                    type: double
                    values: [0.0, 2.0]
                mutationRepairStrategy:
                    type: categorical
                    values: 
                      random:
                      round:
                      bounds:
              values: 
                uniform:
                    specificSubparameters: 
                      uniformMutationPerturbation:
                          type: double
                          values: [0.0, 1.0]
                polynomial:
                    specificSubparameters: 
                      polynomialMutationDistributionIndex:
                          type: double
                          values: [5.0, 400.0]
#
selection:
  type: categorical
  values: 
    tournament:
        specificSubparameters: 
          selectionTournamentSize:
              type: integer
              range: [2, 10]
    random:
#
swarmSize:
  type: integer
  values: [10, 200]
#
normalizeObjectives:
  type: boolean
  values:
    true:
      specificSubparameter:
        epsilonParameterForNormalization:
          type: double
          values: [1.0E-8, 25.0]
    false:
# 
selectionProbability:
  type: double
  values: [0.0, 1.0]