
algorithmResult:
  type: categorical
  values: [population, externalArchive]
#

conditionalParameters:
  algorithmResult=externalArchive:
    populationSizeWithArchive:
      type: integer
      range: [10, 200]
    archiveType:
      type: categorical
      values: [crowdingDistanceArchive, unboundedArchive]
      
#
createInitialSolutions:
  type: categorical
  values: 
    default:
    latinHypercubeSampling:
    scatterSearch:
#
offspringPopulationSize:
  type: categorical
  values: [1, 2, 5, 10, 20, 50, 100, 200, 400]
#
variation:
  type: categorical
  values: 
    crossoverAndMutationVariation:
      specificSubParameters: 
        crossover:
          type: categorical
          globalSubParameters: 
            crossoverProbability:
              type: double
              range: [0.0, 1.0]
            crossoverRepairStrategy:
              type: categorical
              values: [random, round, bounds]
          values: 
            SBX:
              specificSubParameters: 
                sbxDistributionIndex:
                  type: double
                  range: [5.0, 400.0]
            blxAlpha:
              specificSubParameters: 
                blxAlphaCrossoverAlpha:
                  type: double
                  range: [0.0, 1.0]
            wholeArithmetic:
          mutation:
            type: categorical
            globalSubparameters: 
              mutationProbabilityFactor:
                type: double
                range: [0.0, 2.0]
              mutationRepairStrategy:
                type: categorical
                values: 
                  random:
                  round:
                  bounds:
              values: 
                uniform:
                  specificSubParameters: 
                    uniformMutationPerturbation:
                      type: double
                      range: [0.0, 1.0]
                polynomial:
                  specificSubParameters: 
                    polynomialMutationDistributionIndex:
                      type: double
                      range: [5.0, 400.0]
#
selection:
  type: categorical
  values: 
    tournament:
      specificSubParameters: 
        selectionTournamentSize:
          type: integer
          range: [2, 10]
