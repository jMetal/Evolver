algorithmResult:
  type: categorical
  values:
    population:
    externalArchive:
      conditionalParameters:
        populationSizeWithArchive:
          type: integer
          range: [10, 200]
        archiveType:
          type: categorical
          values:
            crowdingDistanceArchive:
            unboundedArchive:
#
createInitialSolutions:
  type: categorical
  values:
    default:
    latinHypercubeSampling:
    scatterSearch:

#
offspringPopulationSize:
  type: categorical
  values: [1, 2, 5, 10, 20, 50, 100, 200, 400]

#
densityEstimator:
  type: categorical
  values:
    crowdingDistance:
    knn:
      conditionalParameters:
        knnNeighborhoodSize:
          type: integer
          range: [1, 5]
        knnNormalizeObjectives:
          type: boolean
          values:
            true:
            false:
    hypervolumeContribution:
    cosineSimilarity:

#
ranking:
  type: categorical
  values:
    dominanceRanking:
    strength:

#
variation:
  type: categorical
  values:
    crossoverAndMutationVariation:
      conditionalParameters:
        crossover:
          type: categorical
          global_subparameters:
            crossoverProbability:
              type: double
              values: [0.0, 1.0]
            crossoverRepairStrategy:
              type: categorical
              values:
                random:
                round:
                bounds:
          values:
            SBX:
              conditionalParameters:
                sbxDistributionIndex:
                  type: double
                  values: [5.0, 400.0]
            BLX_ALPHA:
              conditionalParameters:
                blxAlphaCrossoverAlphaValue:
                  type: double
                  values: [0.0, 1.0]
            wholeArithmetic:
        mutation:
          type: categorical
          globalSubParameters:
            mutationProbabilityFactor:
              type: double
              values: [0.0, 2.0]
            mutationRepairStrategy:
              type: categorical
              values:
                random:
                round:
                bounds:
          values:
            uniform:
              conditionalParameters:
                uniformMutationPerturbation:
                  type: double
                  values: [0.0, 1.0]
            polynomial:
              conditionalParameters:
                polynomialMutationDistributionIndex:
                  type: double
                  values: [5.0, 400.0]
            linkedPolynomial:
              conditionalParameters:
                linkedPolynomialMutationDistributionIndex:
                  type: double
                  values: [5.0, 400.0]
            nonUniform:
              conditionalParameters:
                nonUniformMutationPerturbation:
                  type: double
                  values: [0.0, 1.0]
#
selection:
  type: categorical
  values:
    tournament:
      conditionalParameters:
        selectionTournamentSize:
          type: integer
          range: [2, 10]
    random:

#
replacement:
  type: categorical
  values:
    rankingAndDensityEstimator:
      globalSubParameters:
        removalPolicy:
          values:
            oneShot:
            sequential:

